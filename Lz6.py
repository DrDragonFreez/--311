# -*- coding: utf-8 -*-
"""ЛЗ6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fv0eCW43lgfkbkOjw8x2u0QMzvyL5pdu
"""

import matplotlib.pyplot as plt

celsius = [[-67.0], [-34.0], [0], [34.0], [54.0], [67.0], [100]]
fahrenheit = [[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]]

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, fahrenheit, label='входные значения', color='green', marker='$f$');
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius, fahrenheit):
    print(f'цельсия{c}= фаренгейт {f}')

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(celsius, fahrenheit)

lr.predict([[256], [123]])

lr.coef_

lr.intercept_

celsius_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test= lr.predict(celsius_test)

fahrenheit_test

for c,f in zip(celsius_test, fahrenheit_test):
    print(f'цельсия{c}= фаренгейт {f}')

import numpy as np

x_range = np.arange(-70, 120)
y_range = x_range*1.8+32

plt.figure(figsize=(15,8), dpi=50)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(celsius, fahrenheit, label='входные значения', color='green');
plt.scatter(celsius_test, fahrenheit_test, label='предсказвнное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

"""Задания для самостоятельного выполнения:

Задания обычной сложности:

Задание 1.
"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

fahrenheit = np.array([32, 68, 104, 140, 176, 212])
kelvin = (fahrenheit - 32) * 5/9 + 273.15

plt.figure(figsize=(8, 6))
plt.plot(fahrenheit, kelvin, marker='o', color='b', label='Fahrenheit to Kelvin')
plt.xlabel('Фаренгейт')
plt.ylabel('Кельвин')
plt.legend()
plt.grid(True)
plt.show()

fahrenheit_np = fahrenheit.reshape(-1, 1)
model = LinearRegression()
model.fit(fahrenheit_np, kelvin)
predicted_kelvin = model.predict(fahrenheit_np)

plt.figure(figsize=(8, 6))
plt.plot(fahrenheit, kelvin, marker='o', color='b', label='Исходные данные')
plt.plot(fahrenheit, predicted_kelvin, color='r', label='Предсказанные данные')
plt.xlabel('Фаренгейт')
plt.ylabel('Кельвин')
plt.legend()
plt.grid(True)
plt.show()

"""Задание 2."""

!git clone <https://github.com/DrDragonFreez/Goncharov-Danil-Sergeevich-PI-311>

"""Задание 3."""

labels = ['A', 'B', 'C', 'D']
sizes = [15, 30, 45, 10]
explode = (0.1, 0, 0, 0)

plt.figure(figsize=(6, 6))
plt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.show()

data = np.random.randn(1000)

plt.figure(figsize=(8, 6))
plt.hist(data, bins=30, color='g', alpha=0.7)
plt.xlabel('Значения')
plt.ylabel('Частота')
plt.title('Гистограмма случайных значений')
plt.grid(True)
plt.show()

categories = ['Категория 1', 'Категория 2', 'Категория 3', 'Категория 4']
values = [10, 24, 36, 12]

plt.figure(figsize=(8, 6))
plt.bar(categories, values, color=['red', 'blue', 'green', 'purple'])
plt.xlabel('Категории')
plt.ylabel('Значения')
plt.title('Столбчатый график')
plt.grid(True)
plt.show()

"""Задание 4."""

import math

print("Число Эйлера (e):", math.e)
print("Число Пи (π):", math.pi)
print("nan:", math.nan)

номер_в_журнале = 10
print(f"Факториал номера {номер_в_журнале}: {math.factorial(номер_в_журнале)}")

память_телефона = 128
print(f"Наибольший общий делитель: {math.gcd(номер_в_журнале, память_телефона)}")

"""Задания повышенной сложности:

Задание 1.
"""

import matplotlib.pyplot as plt
import numpy as np

circle = plt.Circle((0.5, 0.5), 0.3, color='orange', fill=True)

left_ear = np.array([[0.2, 0.8], [0.35, 0.8], [0.275, 0.95]])
right_ear = np.array([[0.65, 0.8], [0.8, 0.8], [0.725, 0.95]])

left_eye = plt.Circle((0.35, 0.6), 0.05, color='black', fill=True)
right_eye = plt.Circle((0.65, 0.6), 0.05, color='black', fill=True)

nose = np.array([[0.5, 0.5], [0.45, 0.55], [0.55, 0.55]])

t = np.linspace(-np.pi/4, np.pi/4, 100)
x = 0.5 + 0.1 * np.cos(t)
y = 0.45 + 0.05 * np.sin(t)

fig, ax = plt.subplots()
ax.add_patch(circle)
ax.add_patch(plt.Polygon(left_ear, color='orange', fill=True))
ax.add_patch(plt.Polygon(right_ear, color='orange', fill=True))
ax.add_patch(left_eye)
ax.add_patch(right_eye)
ax.add_patch(plt.Polygon(nose, color='pink', fill=True))
ax.plot(x, y, color='black')
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.set_aspect('equal')
ax.axis('off')
plt.show()

"""Задание 2."""